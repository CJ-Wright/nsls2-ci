#!/bin/bash
: "${GH_TOKEN:?GH_TOKEN not set. Cannot push to github}"
: "${HTML_DIR:?HTML_DIR not set. Do not know where to go to get the built docs}"
: "${TRAVIS_REPO_SLUG:?TRAVIS_REPO_SLUG not set. Docs will not build properly. Please set a repo slug in the form: organization/git_repo. e.g., NSLS-II/databroker}"

echo $TRAVIS_REPO_SLUG
base=docs/`basename $TRAVIS_REPO_SLUG`
echo $base
# prepend base with 'docs/' if it is not the parent repo
if [ $base != 'docs' ]; then
  base="";
fi;
echo "base=$base"
CLONE_DIR="/tmp/docs"
rm -rf $CLONE_DIR
echo "cloning to $CLONE_DIR"

# inside this git repo we'll pretend to be a new user
git config --global user.name "Travis CI"
git config --global user.email "travis@nomail"
# clone the existing github url to some directory
git clone "https://{GH_TOKEN}@${GH_REF}" $CLONE_DIR
cp -rv $HTML_DIR* $CLONE_DIR/$base
pushd $CLONE_DIR
git add -A
git commit -m "Autogenerated pages for $TRAVIS_REPO_SLUG from travis-ci `date`"

# Force push from the current repo's master branch to the remote
# repo's gh-pages branch. (All previous history on the gh-pages branch
# will be lost, since we are overwriting it.) We redirect any output to
# /dev/null to hide any sensitive credential data that might otherwise be exposed.
git push "https://${GH_TOKEN}@${GH_REF}" master > /dev/null 2>&1
popd
