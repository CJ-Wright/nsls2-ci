#!/bin/bash
# early exit if we are not on
if [[ $TRAVIS_BRANCH != 'auto-build' ]] || [[ $TRAVIS_PULL_REQUEST != 'false' ]]; then
  echo "
    This script is not going to push the docs because you are the

        $TRAVIS_BRANCH

    branch (You need to be on master to push) or this travis script is being
    run on a pull request

        $TRAVIS_PULL_REQUEST

    If either of those two conditions are not true, then this travis script
    will not push to

        ${GH_REF}
"
  exit 1
fi
set -e # exit with nonzero exit code if anything fails
base=docs/`basename $TRAVIS_REPO_SLUG`
# prepend base with 'docs/' if it is not the parent repo
if [ $base != 'docs' ]; then
  base="";
fi;
CLONE_DIR="/tmp/docs"
rm -rf $CLONE_DIR
echo "cloning to $CLONE_DIR"

# inside this git repo we'll pretend to be a new user
git config --global user.name "Travis CI"
git config --global user.email "travis@nomail"
# clone the existing github url to some directory
git clone "https://{GH_TOKEN}@${GH_REF}" /tmp/docs
cp -rv build/html/* $CLONE_DIR/$base
cd $CLONE_DIR
git add -A
git commit -m "Autogenerated pages `date`"

# Force push from the current repo's master branch to the remote
# repo's gh-pages branch. (All previous history on the gh-pages branch
# will be lost, since we are overwriting it.) We redirect any output to
# /dev/null to hide any sensitive credential data that might otherwise be exposed.
git push "https://${GH_TOKEN}@${GH_REF}" master > /dev/null 2>&1
